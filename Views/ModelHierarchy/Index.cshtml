@model ModelHierarchyApp.Models.ComponentViewModel
@{
    // Sets the page title for the browser tab
    ViewData["Title"] = "Fusion Model Hierarchy";
}

<!-- 
    Index.cshtml
    -------------
    This Razor Page provides a UI for browsing and viewing the hierarchy of Fusion design models.
    - Uses jsTree for hierarchical navigation of design data.
    - Loads tree data from /ModelHierarchy/TreeData endpoint.
    - Displays details of selected components in the right panel.
    - Folders are not selectable.
    - Shows a loading spinner while fetching component details.
    - Uses Bootstrap Icons and FontAwesome for visual cues.
-->

<!-- 🔗 External Libraries -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>

<div style="font-family: Arial, Helvetica, sans-serif, monospace;">

    <!-- 
        Header Branding
        ---------------
        Displays Autodesk branding and the application title.
    -->
    <div style="background-color: #f8f9fa; border-bottom: 1px solid #ddd; padding: 1rem 2rem; position: relative;">
        <div style="position: absolute; left: 2rem; top: 50%; transform: translateY(-50%);">
            <img src="https://cdn.autodesk.io/logo/black/stacked.png" alt="Autodesk Platform Services" style="height: 60px;" />
        </div>
        <div style="text-align: center;">
            <h1 style="margin: 0; font-size: 2.1rem; color: #212529; font-family:'Arial Unicode MS'">Manufacturing Data Model API</h1>
        </div>
    </div>

    <!-- 
        Alert Container
        ---------------
        Used to display warning or status messages to the user.
    -->
    <div id="alert-container" style="margin: 1rem;"></div>

    <!-- 
        Panels Layout
        -------------
        Left: Tree view for navigation.
        Right: Details of the selected component.
    -->
    <div style="display: flex; gap: 2rem; margin-top: 2rem;">
        <!-- LEFT: Tree View -->
        <div style="flex: 0.75;">
            <h3><i class="bi bi-diagram-3-fill"></i> Fusion Design Navigation</h3>
            <div id="tree-container"></div>
        </div>

        <!-- RIGHT: Component Info -->
        <div style="flex: 1.25;" id="right-panel">
            <h3><i class="bi bi-diagram-3"></i> Select a component to view its hierarchy</h3>
        </div>
    </div>

</div>

<!-- 
    Loading Spinner Styles
    ---------------------
    Styles for the loading spinner and loading text shown while fetching data.
-->
@Html.Raw(@"<style>
.spinner-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 120px;
    padding: 1rem;
}
.spinner {
    width: 40px;
    height: 40px;
    border: 6px solid #ccc;
    border-top-color: #007bff;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
}
@@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}
.loading-text {
    margin-top: 10px;
    font-size: 14px;
    color: #666;
    display: none;
}
</style>")

<!-- 
    Main JavaScript Logic
    ---------------------
    - Initializes jsTree for hierarchical navigation.
    - Disables selection for folders.
    - Handles selection of items (files/components) only.
    - Fetches and displays component details via AJAX.
    - Shows a loading spinner while data is loading.
-->
<script>
    $(function () {
        $('#tree-container').jstree({
            core: {
                data: {
                    // Loads tree data from the server
                    url: '/ModelHierarchy/TreeData',
                    data: node => ({ id: node.id })
                },
                themes: { dots: true, icons: true }
            },
            types: {
                default: { icon: 'bi bi-question-circle' },
                hub: { icon: 'fas fa-users' },
                project: { icon: 'bi bi-journal-code' },
                folder: { 
                    icon: 'bi bi-folder',
                    selectable: false // Disable selection for folders
                },
                item: { icon: 'bi bi-box-seam' }
            },
            plugins: ['wholerow', 'types']
        });

        // Handles node selection in the tree
        $('#tree-container').on("select_node.jstree", function (e, data) {
            const selectedId = data.node.id;
            const rawText = data.node.text.trim(); // e.g. "BasicItem: V8 Engine.iam"

            // Only proceed for items (files/components)
            if (selectedId.startsWith("item_")) {
                // Store last selected node in localStorage
                localStorage.setItem("lastSelectedNodeId", selectedId);

                // Extract file name and extension
                const fileName = rawText.includes(":") ? rawText.split(":")[1].trim() : rawText;
                const extIndex = fileName.lastIndexOf('.');
                const fileExtension = extIndex !== -1 ? fileName.substring(extIndex).toLowerCase() : '';

                // Clear any previous alerts
                $('#alert-container').html(''); 

                // Extract details for AJAX request
                const itemId = selectedId.substring(5);
                const componentName = fileName;
                let hubName = "", projectName = "";

                for (const parentId of data.node.parents) {
                    const parentNode = $('#tree-container').jstree(true).get_node(parentId);
                    if (parentId.startsWith("hub_")) hubName = parentNode.text;
                    if (parentId.startsWith("project_")) projectName = parentNode.text;
                }

                // Show loading spinner in the right panel
                $('#right-panel').html(`
                        <div class="spinner-wrapper">
                            <div class="spinner"></div>
                            <div class="loading-text">Still loading…</div>
                        </div>`);

                // Show loading text if request takes longer than 3 seconds
                const fallbackTimeout = setTimeout(() => {
                    $('.loading-text').fadeIn();
                }, 3000);

                // AJAX request to fetch component hierarchy/details
                $.get("/ModelHierarchy/ItemDetails", {
                    itemId: itemId,
                    componentName: componentName,
                    hubName: hubName,
                    projectName: projectName
                }).done(html => {
                    clearTimeout(fallbackTimeout);
                    $('#right-panel').html(html);
                }).fail(() => {
                    clearTimeout(fallbackTimeout);
                    $('#right-panel').html("<p style='color:red;'>Error loading component.</p>");
                });
            }
        });
    });
</script>
